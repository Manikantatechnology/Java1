1.Duplicate elemenets in an array

import java.util.*;
public class Main
{
	public static void main(String[] args)
	{
		System.out.println("Enter the length of the array : ");
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		int count=0;
		System.out.println("Enter thearray : ");
		for(int i=0;i<arr.length;i++)
		{
		    arr[i]=sc.nextInt();
		}
		System.out.print("The array is : ");
		for(int i:arr)
		{
		   System.out.print(i+" ");
		}
		System.out.println();
		for(int i=0;i<arr.length-1;i++)
		{
		    for(int j=i+1;j<arr.length;j++)
		    {
		        if(arr[i]==arr[j])
		        {
		            System.out.println(arr[i] +" is duplicate element in the array");
				count=1;
		        }
		    }
		}
		if(count==0)
			System.out.println("No duplicates elements in the array");
		
	}
}

2.Quick sort


class Main
{
    int partition(int arr[], int low, int high)
    {
        int pivot = arr[high];
        int i = (low-1); 
        for (int j=low; j<high; j++)
        {
            if (arr[j] <= pivot)
            {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
 
        
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
 
        return i+1;
    }
 
 
   
    void sort(int arr[], int low, int high)
    {
        if (low < high)
        {
            
            int pi = partition(arr, low, high);
 
            
            sort(arr, low, pi-1);
            sort(arr, pi+1, high);
        }
    }
 
    
    static void printArray(int arr[])
    {
        int n = arr.length;
        for (int i=0; i<n; ++i)
            System.out.print(arr[i]+" ");
        System.out.println();
    }
 
    
    public static void main(String args[])
    {
        int arr[] = {10,9,2,1,3,4,5,1};
        int n = arr.length;
 
        Main ob = new Main();
        ob.sort(arr, 0, n-1);
 
        System.out.println("sorted array");
        printArray(arr);
    }
}



3.Bubble sort

import java.util.*;
public class Main
{
	public static void main(String[] args)
	{
		System.out.println("Enter the length of the array : ");
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		System.out.println("Enter thearray : ");
		for(int i=0;i<arr.length;i++)
		{
		    arr[i]=sc.nextInt();
		}
		System.out.print("The array before sorting: ");
		for(int i:arr)
		{
		   System.out.print(i+" ");
		}
		System.out.println();
		for(int i=0;i<arr.length-1;i++)
		{
		    for(int j=0;j<arr.length-1-i;j++)
		    {
		        if(arr[j]>arr[j+1])
		        {
		            int temp=arr[j];
		            arr[j]=arr[j+1];
		            arr[j+1]=temp;
		        }
		    }
		}
		System.out.print("The array after sorting: ");
		for(int i:arr)
		{
		   System.out.print(i+" ");
		}
		
	}
}


4. Merge Sort


class Main {  
  
void merge(int a[], int beg, int mid, int end)    
{    
    int i, j, k;  
    int n1 = mid - beg + 1;    
    int n2 = end - mid;    
      
  
        int LeftArray[] = new int[n1];  
        int RightArray[] = new int[n2];  
      
   
    for (i = 0; i < n1; i++)    
    LeftArray[i] = a[beg + i];    
    for (j = 0; j < n2; j++)    
    RightArray[j] = a[mid + 1 + j];    
      
    i = 0;  
    j = 0;   
    k = beg;  
      
    while (i < n1 && j < n2)    
    {    
        if(LeftArray[i] <= RightArray[j])    
        {    
            a[k] = LeftArray[i];    
            i++;    
        }    
        else    
        {    
            a[k] = RightArray[j];    
            j++;    
        }    
        k++;    
    }    
    while (i<n1)    
    {    
        a[k] = LeftArray[i];    
        i++;    
        k++;    
    }    
      
    while (j<n2)    
    {    
        a[k] = RightArray[j];    
        j++;    
        k++;    
    }    
}    
  
void mergeSort(int a[], int beg, int end)  
{  
    if (beg < end)   
    {  
        int mid = (beg + end) / 2;  
        mergeSort(a, beg, mid);  
        mergeSort(a, mid + 1, end);  
        merge(a, beg, mid, end);  
    }  
}  
  

void printArray(int a[], int n)  
{  
    int i;  
    for (i = 0; i < n; i++)  
        System.out.print(a[i] + " ");  
}  
  
public static void main(String args[])  
{  
    int a[] = {23,34,35,12,11,10};  
    int n = a.length;  
    Main m1 = new Main();  
    System.out.println("\nBefore sorting array elements are - ");  
    m1.printArray(a, n);  
    m1.mergeSort(a, 0, n - 1);  
    System.out.println("\nAfter sorting array elements are - ");  
    m1.printArray(a, n);  
    System.out.println("");  
}  
  
  }  


5.Selection sort

import java.util.*;
public class Main
{
	public static void main(String[] args)
	{
		System.out.println("Enter the length of the array : ");
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n];
		System.out.println("Enter thearray : ");
		for(int i=0;i<arr.length;i++)
		{
		    arr[i]=sc.nextInt();
		}
		System.out.print("The array before sorting: ");
		for(int i:arr)
		{
		   System.out.print(i+" ");
		}
		System.out.println();
		
		for(int i=0;i<arr.length-1;i++)
		{
		    int min_value = i;
            for (int j = i+1; j <arr.length; j++)
            {
                if (arr[j] < arr[min_value])
                    min_value = j;
            }
            int temp = arr[min_value];
            arr[min_value]= arr[i];
            arr[i] = temp;
    		
    		for(int ele:arr)
    		{
    		   System.out.print(ele+" ");
    		}
    		System.out.println();
		}
		    
		
		System.out.print("The array after sorting: ");
		for(int i:arr)
		{
		   System.out.print(i+" ");
		}
		
	}
}

6.Array is subset of another array

class Main
{
    public static void main(String args[])
    {
        int arr1[]={1,2,3,4,5};
        int arr2[]={1,2,3,4,5};
        int count=0;
        
        for(int i=0;i<arr2.length;i++)
        {
            for(int j=0;j<arr1.length;j++)
            {
                if(arr2[i]==arr1[j])
                    count++;
            }
        }
        if(count==arr2.length)
            System.out.println("Array 2 is subset of array 1");
        else
            System.out.println("Array 2 is not the subset of array1");
    }
}



